
หลักการทำงานของโค้ดนี้
โค้ดนี้เป็นการสร้าง JWT Authentication Library สำหรับจัดการ Token ที่ใช้ในการยืนยันตัวตนและควบคุมการเข้าถึงข้อมูลในระบบ โดยทำงานผ่านหลักการดังนี้:

---

1. การสร้าง Token
Token ประเภทที่รองรับ
- Access Token: ใช้สำหรับยืนยันตัวตนของผู้ใช้ในช่วงเวลาสั้น ๆ เมื่อเข้าถึง API
- Refresh Token: ใช้สำหรับต่ออายุ Access Token เมื่อหมดอายุโดยไม่ต้องล็อกอินใหม่
- API Key: ใช้สำหรับยืนยันตัวตนของระบบ (เช่น การเชื่อมต่อระหว่างระบบ)

ขั้นตอนการสร้าง Token
1. รับ SecretKey (คีย์ลับ) สำหรับใช้เซ็น Token
2. สร้างข้อมูล Claims ซึ่งเก็บข้อมูลสำคัญ เช่น:
   - id (รหัสผู้ใช้)
   - role_code (บทบาท/สิทธิ์ของผู้ใช้)
3. ใช้ Claims ร่วมกับฟิลด์ที่กำหนดใน RegisteredClaims ของ JWT เช่น:
   - Issuer (ผู้สร้าง Token)
   - ExpiresAt (วันหมดอายุ)
   - IssuedAt (เวลาที่สร้าง)
   - NotBefore (เวลาที่เริ่มใช้งาน)
4. สร้าง JWT โดยเลือกวิธีเซ็น เช่น ES256 หรือ HMAC ตามที่กำหนด
5. คืนค่า JWT เป็นข้อความที่เซ็นแล้ว (Signed Token)

---

2. การตรวจสอบ (Validation) Token
- เมื่อผู้ใช้งานส่ง Token มายังระบบ:
  1. ใช้ฟังก์ชัน ParseToken เพื่อตรวจสอบ Token
  2. ตรวจสอบว่าวิธีเซ็น (SigningMethod) ตรงกับที่กำหนดไว้ในระบบ (ป้องกันการโจมตีแบบเปลี่ยนแปลงวิธีเซ็น)
  3. ใช้ SecretKey เดิมเพื่อตรวจสอบความถูกต้องของ Token
  4. ตรวจสอบค่าใน Claims:
     - Token หมดอายุหรือยัง (ExpiresAt)
     - Token ถูกต้องตามรูปแบบหรือไม่
  5. คืนข้อมูล Claims หากตรวจสอบผ่าน หรือคืนข้อผิดพลาดในกรณีที่ Token ไม่ผ่านการตรวจสอบ

---

3. การต่ออายุ (Refresh) Token
- หาก Access Token หมดอายุ:
  1. ใช้ Refresh Token ที่ยังไม่หมดอายุเพื่อต่ออายุ Access Token
  2. สร้าง Access Token ใหม่ด้วยข้อมูลผู้ใช้เดิม (Claims เดิม)

---

4. การจัดการ API Key
- สร้าง API Key สำหรับการระบุระบบ (ไม่ใช่ผู้ใช้)
- API Key ถูกสร้างเพียงครั้งเดียว (Singleton) เพื่อให้ประสิทธิภาพการใช้งานสูงสุด
- ใช้ฟังก์ชัน SetApiKeyInContext เพิ่ม API Key ลงใน Context ของ gRPC เพื่อส่งไปยัง API ที่ต้องการ

---

5. การจัดการเวลา
- ใช้ Timezone Asia/Bangkok เพื่อปรับเวลาของ Token ให้สอดคล้องกับพื้นที่
- คำนวณเวลาในรูปแบบ Unix Timestamp และแปลงเป็น NumericDate ของ JWT

---

6. การออกแบบที่ยืดหยุ่น
- ใช้โครงสร้างแบบ Interface (AuthFactory) ทำให้สามารถเปลี่ยนแปลงวิธีสร้างหรือเซ็น Token ได้ง่าย
- มีการแบ่งแยกประเภท Token (Access, Refresh, API Key) ทำให้สามารถควบคุมการทำงานได้ชัดเจน
- ใช้ Thread-safe (sync.Once) เพื่อสร้าง API Key เพียงครั้งเดียว แม้จะมีการเรียกหลายครั้งพร้อมกัน

---

สรุปการทำงาน
1. รับข้อมูลผู้ใช้และ SecretKey
2. สร้าง Token ที่มีข้อมูลและเวลาเหมาะสมกับการใช้งาน
3. ใช้ฟังก์ชัน Parse ตรวจสอบความถูกต้องของ Token
4. ต่ออายุ Token ได้ในกรณีที่หมดอายุ (ด้วย Refresh Token)
5. รองรับการเพิ่ม API Key ใน Context ของ gRPC

โค้ดนี้เหมาะกับการใช้ในระบบที่ต้องการ JWT Authentication เพื่อให้มั่นใจในความปลอดภัยและความสะดวกในการควบคุมการเข้าถึง API.
